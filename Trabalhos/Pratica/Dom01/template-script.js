/* ============================================
   üìù LISTA DE TAREFAS - JAVASCRIPT
   Pr√°tica JavaScript DOM - Template Inicial
   ============================================ */

// ========== VARI√ÅVEIS GLOBAIS ==========
let tasks = []; // Array para armazenar todas as tarefas
let taskIdCounter = 1; // Contador para IDs √∫nicos
let currentFilter = 'all'; // Filtro atual ativo

// ========== ELEMENTOS DOM ==========
// TODO: Selecionar os elementos necess√°rios usando getElementById, querySelector, etc.
const taskInput = null; // document.getElementById('taskInput');
const addBtn = null; // document.getElementById('addBtn');
const taskList = null; // document.getElementById('taskList');
const emptyState = null; // document.getElementById('emptyState');
const filterBtns = null; // document.querySelectorAll('.filter-btn');

// Elementos de estat√≠sticas
const totalTasksSpan = null; // document.getElementById('totalTasks');
const completedTasksSpan = null; // document.getElementById('completedTasks');
const pendingTasksSpan = null; // document.getElementById('pendingTasks');

// ========== FUN√á√ïES PRINCIPAIS ==========

/**
 * Fun√ß√£o para inicializar a aplica√ß√£o
 */
function initApp() {
    console.log('üöÄ Aplica√ß√£o Lista de Tarefas iniciada!');
    
    // TODO: Adicionar event listeners
    // addBtn.addEventListener('click', addTask);
    // taskInput.addEventListener('keypress', handleEnterKey);
    
    // TODO: Adicionar event listeners para filtros
    // filterBtns.forEach(btn => {
    //     btn.addEventListener('click', handleFilterClick);
    // });
    
    // TODO: Adicionar event delegation para a lista de tarefas
    // taskList.addEventListener('click', handleTaskActions);
    
    updateDisplay();
}

/**
 * Fun√ß√£o para adicionar uma nova tarefa
 */
function addTask() {
    // TODO: Implementar l√≥gica para adicionar tarefa
    console.log('üîÑ Fun√ß√£o addTask chamada');
    
    // 1. Pegar o valor do input
    // 2. Validar se n√£o est√° vazio
    // 3. Criar objeto da tarefa
    // 4. Adicionar ao array tasks
    // 5. Limpar input
    // 6. Atualizar display
}

/**
 * Fun√ß√£o para criar elemento HTML da tarefa
 * @param {Object} task - Objeto da tarefa
 * @returns {HTMLElement} - Elemento li da tarefa
 */
function createTaskElement(task) {
    console.log('üèóÔ∏è Criando elemento para tarefa:', task.text);
    
    // TODO: Implementar cria√ß√£o do elemento
    // 1. Criar elemento li
    // 2. Definir classes e atributos
    // 3. Criar HTML interno (checkbox, texto, bot√µes)
    // 4. Retornar elemento
    
    return null; // Tempor√°rio
}

/**
 * Fun√ß√£o para alternar status de conclus√£o da tarefa
 * @param {number} taskId - ID da tarefa
 */
function toggleTask(taskId) {
    console.log('‚úÖ Alternando status da tarefa:', taskId);
    
    // TODO: Implementar toggle
    // 1. Encontrar tarefa no array
    // 2. Alterar propriedade completed
    // 3. Atualizar display
}

/**
 * Fun√ß√£o para remover tarefa
 * @param {number} taskId - ID da tarefa
 */
function removeTask(taskId) {
    console.log('üóëÔ∏è Removendo tarefa:', taskId);
    
    // TODO: Implementar remo√ß√£o
    // 1. Confirmar com usu√°rio
    // 2. Remover do array tasks
    // 3. Atualizar display
}

/**
 * Fun√ß√£o para editar tarefa
 * @param {number} taskId - ID da tarefa
 */
function editTask(taskId) {
    console.log('‚úèÔ∏è Editando tarefa:', taskId);
    
    // TODO: Implementar edi√ß√£o
    // 1. Encontrar elemento da tarefa
    // 2. Substituir texto por input
    // 3. Adicionar bot√µes salvar/cancelar
    // 4. Implementar l√≥gica de salvamento
}

/**
 * Fun√ß√£o para filtrar tarefas
 * @param {string} filter - Tipo de filtro (all, pending, completed)
 */
function filterTasks(filter) {
    console.log('üîç Aplicando filtro:', filter);
    
    currentFilter = filter;
    
    // TODO: Implementar filtros
    // 1. Mostrar/esconder tarefas baseado no filtro
    // 2. Atualizar bot√µes de filtro
    // 3. Atualizar display
}

/**
 * Fun√ß√£o para atualizar estat√≠sticas
 */
function updateStats() {
    console.log('üìä Atualizando estat√≠sticas');
    
    // TODO: Implementar atualiza√ß√£o de stats
    // 1. Calcular total de tarefas
    // 2. Calcular tarefas conclu√≠das
    // 3. Calcular tarefas pendentes
    // 4. Atualizar elementos DOM
}

/**
 * Fun√ß√£o para atualizar display geral
 */
function updateDisplay() {
    console.log('üîÑ Atualizando display');
    
    // TODO: Implementar atualiza√ß√£o completa
    // 1. Limpar lista atual
    // 2. Renderizar todas as tarefas
    // 3. Aplicar filtro atual
    // 4. Atualizar estat√≠sticas
    // 5. Mostrar/esconder estado vazio
}

/**
 * Fun√ß√£o para mostrar/esconder estado vazio
 */
function toggleEmptyState() {
    // TODO: Implementar toggle do estado vazio
    // 1. Verificar se h√° tarefas vis√≠veis
    // 2. Mostrar/esconder mensagem apropriada
}

// ========== EVENT HANDLERS ==========

/**
 * Handler para tecla Enter no input
 * @param {Event} e - Evento de teclado
 */
function handleEnterKey(e) {
    if (e.key === 'Enter') {
        addTask();
    }
}

/**
 * Handler para cliques nos bot√µes de filtro
 * @param {Event} e - Evento de clique
 */
function handleFilterClick(e) {
    const filter = e.target.getAttribute('data-filter');
    filterTasks(filter);
}

/**
 * Handler para a√ß√µes nas tarefas (event delegation)
 * @param {Event} e - Evento de clique
 */
function handleTaskActions(e) {
    const target = e.target;
    const taskItem = target.closest('.task-item');
    
    if (!taskItem) return;
    
    const taskId = parseInt(taskItem.getAttribute('data-id'));
    
    // TODO: Implementar diferentes a√ß√µes baseado no elemento clicado
    if (target.classList.contains('task-checkbox')) {
        // toggleTask(taskId);
    } else if (target.classList.contains('edit-btn')) {
        // editTask(taskId);
    } else if (target.classList.contains('delete-btn')) {
        // removeTask(taskId);
    }
}

// ========== FUN√á√ïES AUXILIARES ==========

/**
 * Fun√ß√£o para validar input de tarefa
 * @param {string} text - Texto a ser validado
 * @returns {boolean} - True se v√°lido
 */
function validateTaskInput(text) {
    // TODO: Implementar valida√ß√£o
    // 1. Verificar se n√£o est√° vazio
    // 2. Verificar comprimento m√≠nimo/m√°ximo
    // 3. Verificar caracteres especiais se necess√°rio
    return text && text.trim().length > 0;
}

/**
 * Fun√ß√£o para encontrar tarefa por ID
 * @param {number} id - ID da tarefa
 * @returns {Object|null} - Objeto da tarefa ou null
 */
function findTaskById(id) {
    return tasks.find(task => task.id === id) || null;
}

/**
 * Fun√ß√£o para criar objeto de tarefa
 * @param {string} text - Texto da tarefa
 * @returns {Object} - Objeto da tarefa
 */
function createTaskObject(text) {
    return {
        id: taskIdCounter++,
        text: text.trim(),
        completed: false,
        createdAt: new Date()
    };
}

// ========== INICIALIZA√á√ÉO ==========

// Inicializar aplica√ß√£o quando DOM estiver carregado
document.addEventListener('DOMContentLoaded', initApp);

// ========== DADOS DE TESTE (OPCIONAL) ==========

/**
 * Fun√ß√£o para adicionar tarefas de exemplo (para testes)
 */
function addSampleTasks() {
    const sampleTasks = [
        'Estudar JavaScript DOM',
        'Implementar fun√ß√£o de adicionar tarefa',
        'Criar sistema de filtros',
        'Adicionar valida√ß√µes',
        'Testar funcionalidades'
    ];
    
    sampleTasks.forEach(taskText => {
        const task = createTaskObject(taskText);
        tasks.push(task);
    });
    
    // Marcar algumas como conclu√≠das para teste
    if (tasks.length > 0) {
        tasks[0].completed = true;
        tasks[2].completed = true;
    }
    
    updateDisplay();
    console.log('üìù Tarefas de exemplo adicionadas!');
}

// Descomente a linha abaixo para adicionar tarefas de exemplo
// setTimeout(addSampleTasks, 1000);

/* ============================================
   üìö DICAS PARA IMPLEMENTA√á√ÉO:

   1. SELE√á√ÉO DE ELEMENTOS:
      - Use getElementById() para elementos √∫nicos
      - Use querySelectorAll() para m√∫ltiplos elementos
      - Use querySelector() para o primeiro elemento

   2. MANIPULA√á√ÉO DE CONTE√öDO:
      - innerHTML para HTML complexo
      - textContent para texto simples
      - value para inputs

   3. CRIA√á√ÉO DE ELEMENTOS:
      - createElement() para criar elementos
      - appendChild() para adicionar ao DOM
      - setAttribute() para atributos

   4. EVENTOS:
      - addEventListener() para adicionar eventos
      - Event delegation para elementos din√¢micos
      - preventDefault() quando necess√°rio

   5. CLASSES CSS:
      - classList.add() para adicionar classes
      - classList.remove() para remover
      - classList.toggle() para alternar

   6. VALIDA√á√ïES:
      - Sempre validar inputs do usu√°rio
      - Verificar se elementos existem antes de usar
      - Tratar erros adequadamente

   ============================================ */